# -*- coding: utf-8 -*-
"""
Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.


Explanation: even Fibonacci numbers are separated by exactly 2 odd ones.
Proof is by induction. It's true with the first numbers: 2, 3, 5, 8.
Assume that it's true till i-th number that is even. Then (i-1)th one is odd.
(i+1)th one is (i-1)th + i-th and then odd. And then (i+2)th one is the sum of
the i-th and the (i+1)th one that should be odd too. The (i+3)th one is the
sum of 2 odd numbers, which is then even.

With this, we can accelate a bit the computation. Suppose that we have
a, b are the (i-1)th and i-th Fibonacci number where b is even.
The next numbers are:

(i-1)th: a
i-th:    b
(i+1)th: a + b
(i+2)th: a + 2b
(i+3)th: 2a + 3b

So if we remember (i+2)th and (i+3) as a', b', we can compute the next ones

"""

def fibonacci_pair(a, b):
    return a + 2*b, 2*a + 3*b

def sum_even_fibonacci(iLimit):
    a = 1
    b = 2
    aSum = 0
    while b <= iLimit:
        aSum += b
        a, b = fibonacci_pair(a, b)
    return aSum

def main():
    print('Hello Problem 2')
    print(sum_even_fibonacci(4000000))

if __name__ == '__main__':
    main()