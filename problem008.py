# -*- coding: utf-8 -*-
"""
The four adjacent digits in the 1000-digit number that have the greatest
product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the
greatest product. What is the value of this product?

Solution:
we use a windown of N digits, with the product is computed.
If we slide 1 digit, we can compute the new product by
dividing the first digit in the window, and put the new digit to the end of
the window.
An exception is that if a Zero is met, we should slide directly to the position
after this digit, and recompute all.
"""

aDigitList = '73167176531330624919225119674426574742355349194934' \
'96983520312774506326239578318016984801869478851843' \
'85861560789112949495459501737958331952853208805511' \
'12540698747158523863050715693290963295227443043557' \
'66896648950445244523161731856403098711121722383113' \
'62229893423380308135336276614282806444486645238749' \
'30358907296290491560440772390713810515859307960866' \
'70172427121883998797908792274921901699720888093776' \
'65727333001053367881220235421809751254540594752243' \
'52584907711670556013604839586446706324415722155397' \
'53697817977846174064955149290862569321978468622482' \
'83972241375657056057490261407972968652414535100474' \
'82166370484403199890008895243450658541227588666881' \
'16427171479924442928230863465674813919123162824586' \
'17866458359124566529476545682848912883142607690042' \
'24219022671055626321111109370544217506941658960408' \
'07198403850962455444362981230987879927244284909188' \
'84580156166097919133875499200524063689912560717606' \
'05886116467109405077541002256983155200055935729725' \
'71636269561882670428252483600823257530420752963450'

def digit_product(iDigits, iDigitLen, iPos, iLen):
    aLast = iPos + iLen - 1
    if aLast < iDigitLen:
        aProduct = 1
        aList = []
        for i in reversed(xrange(iPos, aLast + 1)):
            aNum = int(iDigits[i])
            if aNum > 0:
                aProduct *= aNum
                aList.append(aNum)
            else:
                return (0, [], i + 1)
        aList.reverse()
        return (aProduct, aList, iPos + 1)
    return (0, [], -1)

def next_product(iDigits, iDigitLen, iPos, iLen, iPreviousList, iPreviousProduct):
    if not iPreviousProduct:
        return digit_product(iDigits, iDigitLen, iPos, iLen)
    aLast = iPos + iLen - 1
    if aLast < iDigitLen:
        aNum = int(iDigits[aLast])
        if aNum > 0:
            aProduct = iPreviousProduct * aNum / iPreviousList[0]
            iPreviousList.pop(0)
            iPreviousList.append(aNum)
            return (aProduct, iPreviousList, iPos + 1)
        else:
            return (0, [], iPos + iLen)
    return (0, [], -1)

def find_biggest_product(iDigits, iLen):
    aDigitLen = len(iDigits)
    aProduct, aWindow, aNext = digit_product(iDigits, aDigitLen, 0, iLen)
    aMax = aProduct
    while aNext > 0:
        if aProduct > 0:
            aProduct, aWindow, aNext = next_product(iDigits, aDigitLen, aNext, iLen, aWindow, aProduct)
        else:
            aProduct, aWindow, aNext = digit_product(iDigits, aDigitLen, aNext, iLen)
        if aProduct > aMax:
            aMax = aProduct
    return aMax

def main():
    print('Hello Problem 8')
    print(aDigitList)
    print(find_biggest_product(aDigitList, 13))

if __name__ == '__main__':
    main()
